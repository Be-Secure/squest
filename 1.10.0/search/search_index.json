{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Squest","text":"<p>The current deployment is based on Docker compose.</p> <p>Pre-requisites:</p> <ul> <li>docker</li> <li>docker-compose</li> </ul> <p>To run the application, execute the docker compose file <pre><code>docker-compose up\n</code></pre></p> <p>Then connect with your web browser to http://127.0.0.1:8080 The default admin account is <code>admin // admin</code></p> <p>The default export the port 8080. If you want to use the standard HTTP port 80, update the  file <code>docker-compose.override.yml</code>. <pre><code>services:\nnginx:\nports:\n- \"80:8080\"\n</code></pre></p> <p>More details are available in the \"Installation\" section of this documentation.</p>"},{"location":"configuration/squest_settings/","title":"Configuration  settings","text":"<p>Default settings are configured to provide a testing/development environment. For a production setup it is recommended to adjust them following you production target environment.</p> <p>The configuration is loaded from environment variables file placed in the folder <code>docker/environment_variables</code>.</p>"},{"location":"configuration/squest_settings/#database","title":"Database","text":""},{"location":"configuration/squest_settings/#db_root_password","title":"DB_ROOT_PASSWORD","text":"<p>Set the database root/superuser password</p>"},{"location":"configuration/squest_settings/#database_1","title":"DATABASE","text":"<p>Default: <code>default</code></p> <p>Setup mysql database usage Set to <code>psql</code> for postgres SQL usage</p>"},{"location":"configuration/squest_settings/#db_database","title":"DB_DATABASE","text":"<p>Default: <code>squest_db</code></p> <p>Database name.</p>"},{"location":"configuration/squest_settings/#db_user","title":"DB_USER","text":"<p>Default: <code>squest_user</code></p> <p>User used to connect to the <code>DB_DATABASE</code> name.</p>"},{"location":"configuration/squest_settings/#db_password","title":"DB_PASSWORD","text":"<p>Default: <code>squest_password</code></p> <p>Password of the <code>DB_USER</code> username.  </p>"},{"location":"configuration/squest_settings/#db_host","title":"DB_HOST","text":"<p>Default: <code>127.0.0.1</code></p> <p>Database host. The default value is localhost to match the development configuration.  Switch to <code>db</code> in production when using the docker-compose based deployment.</p>"},{"location":"configuration/squest_settings/#db_port","title":"DB_PORT","text":"<p>Default: <code>3306</code></p> <p>Database port.</p>"},{"location":"configuration/squest_settings/#authentication","title":"Authentication","text":""},{"location":"configuration/squest_settings/#ldap","title":"LDAP","text":"<p>See See configuration doc.</p>"},{"location":"configuration/squest_settings/#default_admin_token","title":"DEFAULT_ADMIN_TOKEN","text":"<p>Default: <code>None</code></p> <p>Set an API token that will be linked to the admin user when starting Squest.</p>"},{"location":"configuration/squest_settings/#login_helper_text","title":"LOGIN_HELPER_TEXT","text":"<p>Default: <code>None</code></p> <p>Add a custom note into the login page that helps user to know what are the expected credentials. HTML text is supported.</p> <p>E.G: \"Use your corporate email and password\".</p>"},{"location":"configuration/squest_settings/#squest","title":"Squest","text":""},{"location":"configuration/squest_settings/#maintenance_mode_enabled","title":"MAINTENANCE_MODE_ENABLED","text":"<p>Default: False</p> <p>When enabled, only administrators can access squest UI and API.  This can be used for example to block new requests by end users from the service catalog. So an administrator can perform operations against the API like migrating instance specs.</p> <p>Note</p> <p>This can also be set on the fly from the admin panel (top right corner of the UI) in the object <code>Squest settings</code>.</p>"},{"location":"configuration/squest_settings/#squest_host","title":"SQUEST_HOST","text":"<p>Default: <code>http://squest.domain.local</code></p> <p>Address of the Squest portal instance. Used in email templates and in metadata sent to Tower job templates.</p>"},{"location":"configuration/squest_settings/#squest_email_host","title":"SQUEST_EMAIL_HOST","text":"<p>Default: <code>squest@squest.domain.local</code></p> <p>Domain name used as email sender. E.g: \"squest@squest.domain.local\". </p>"},{"location":"configuration/squest_settings/#squest_email_notification_enabled","title":"SQUEST_EMAIL_NOTIFICATION_ENABLED","text":"<p>Default: Based on <code>DEBUG</code> value by default</p> <p>Set to <code>True</code> to enable email notifications.  </p>"},{"location":"configuration/squest_settings/#smtp","title":"SMTP","text":""},{"location":"configuration/squest_settings/#email_host","title":"EMAIL_HOST","text":"<p>Default: <code>localhost</code></p> <p>The SMTP host to use for sending email.</p>"},{"location":"configuration/squest_settings/#email_port","title":"EMAIL_PORT","text":"<p>Default: <code>25</code></p> <p>Port to use for the SMTP server defined in <code>EMAIL_HOST</code>.  </p>"},{"location":"configuration/squest_settings/#backup","title":"Backup","text":""},{"location":"configuration/squest_settings/#backup_enabled","title":"BACKUP_ENABLED","text":"<p>Default: <code>False</code></p> <p>Switch to <code>True</code> to enable backup. Refer to the dedicated documentation.</p>"},{"location":"configuration/squest_settings/#backup_crontab","title":"BACKUP_CRONTAB","text":"<p>Default: <code>0 1 * * *</code></p> <p>Crontab line for backup. By default, the backup is performed every day at 1AM.</p>"},{"location":"configuration/squest_settings/#dbbackup_cleanup_keep","title":"DBBACKUP_CLEANUP_KEEP","text":"<p>Default: <code>5</code></p> <p>Number of db backup file to keep. Doc.</p>"},{"location":"configuration/squest_settings/#dbbackup_cleanup_keep_media","title":"DBBACKUP_CLEANUP_KEEP_MEDIA","text":"<p>Default: <code>5</code></p> <p>Number of media backup tar to keep. Doc.</p>"},{"location":"configuration/squest_settings/#metrics","title":"Metrics","text":""},{"location":"configuration/squest_settings/#metrics_enabled","title":"METRICS_ENABLED","text":"<p>Default: <code>False</code></p> <p>Switch to <code>True</code> to enable Prometheus metrics page.</p>"},{"location":"configuration/squest_settings/#metrics_password_protected","title":"METRICS_PASSWORD_PROTECTED","text":"<p>Default: <code>True</code></p> <p>Switch to <code>False</code> to disable the basic authentication on metrics page.</p>"},{"location":"configuration/squest_settings/#metrics_authorization_username","title":"METRICS_AUTHORIZATION_USERNAME","text":"<p>Default: <code>admin</code></p> <p>Username for the basic authentication of the metrics page.</p>"},{"location":"configuration/squest_settings/#metrics_authorization_password","title":"METRICS_AUTHORIZATION_PASSWORD","text":"<p>Default: <code>admin</code></p> <p>Password for the basic authentication of the metrics page.</p>"},{"location":"configuration/squest_settings/#auto-cleanup","title":"Auto cleanup","text":""},{"location":"configuration/squest_settings/#doc_images_cleanup_enabled","title":"DOC_IMAGES_CLEANUP_ENABLED","text":"<p>Default: <code>False</code></p> <p>Switch to <code>True</code> to enable automatic cleanup of ghost docs images from media folder.</p>"},{"location":"configuration/squest_settings/#doc_images_cleanup_crontab","title":"DOC_IMAGES_CLEANUP_CRONTAB","text":"<p>Default: <code>30 1 * * *</code></p> <p>Crontab line for ghost image cleanup. By default performed every day at 1:30 AM.</p>"},{"location":"configuration/squest_settings/#production","title":"Production","text":""},{"location":"configuration/squest_settings/#secret_key","title":"SECRET_KEY","text":"<p>Default:  Default randomly-generated</p> <p>Django secret key used for cryptographic signing. Doc.</p>"},{"location":"configuration/squest_settings/#debug","title":"DEBUG","text":"<p>Default: True</p> <p>Django DEBUG mode. Switch to <code>False</code> for production.</p>"},{"location":"configuration/squest_settings/#allowed_hosts","title":"ALLOWED_HOSTS","text":"<p>Default: <code>*</code></p> <p>Comma separated list of allowed FQDN. Refer to the complete documentation.   </p>"},{"location":"configuration/squest_settings/#celery_broker_url","title":"CELERY_BROKER_URL","text":"<p>Default: <code>amqp://rabbitmq:rabbitmq@localhost:5672/squest</code></p> <p>RabbitMQ message broker URL. The default value is localhost to match the development configuration.  Replace <code>localhost</code> by <code>rabbitmq</code> in production when using the docker-compose based deployment.</p>"},{"location":"configuration/squest_settings/#celery_task_soft_time_limit","title":"CELERY_TASK_SOFT_TIME_LIMIT","text":"<p>Default: <code>300</code></p> <p>Async task execution timeout. Doc.</p>"},{"location":"configuration/squest_settings/#language_code","title":"LANGUAGE_CODE","text":"<p>Default: <code>en-us</code></p> <p>Django language. Doc</p>"},{"location":"configuration/squest_settings/#time_zone","title":"TIME_ZONE","text":"<p>Default: <code>Europe/Paris</code></p> <p>Time zone of the server that host Squest service. Doc</p>"},{"location":"configuration/squest_settings/#date_format","title":"DATE_FORMAT","text":"<p>Default: <code>%d %b, %Y  %H:%M</code></p> <p>Change the format of all date in Squest UI. Based on Python strftime.</p>"},{"location":"configuration/squest_settings/#plugins","title":"Plugins","text":""},{"location":"configuration/squest_settings/#field_validator_path","title":"FIELD_VALIDATOR_PATH","text":"<p>Path to form field validation modules.</p> <p>Default: <code>plugins/field_validators</code></p>"},{"location":"configuration/tower_settings/","title":"Tower configuration","text":"<p>Squest will need a token in order to communicate with your Tower instance.</p>"},{"location":"configuration/tower_settings/#create-an-application-on-your-towerawx-instance","title":"Create an application on your Tower/AWX instance","text":"<p>On Tower, go in Application menu and create a new app with the following configuration:</p> <ul> <li>name: squest</li> <li>Organization: Default  </li> <li>Authorization grant type: Resource owner password based</li> <li>Client type: Confidential</li> </ul>"},{"location":"configuration/tower_settings/#create-a-token-for-squest-application","title":"Create a token for Squest application","text":"<p>On Tower/AWX:</p> <ul> <li>Go in your Profile page (top right corner), go into the tokens section</li> <li>Click add button</li> <li>Search for the \"squest\" application created previously and select it</li> <li>Give a scope \"write\"</li> <li>Save</li> <li>Copy the generated token. This will be the token to give to Squest when creating a new Tower server instance.</li> </ul>"},{"location":"contribute/code/","title":"Contributing: code","text":"<p>The community can contribute to Squest by providing some new features, bug fix and enhancements.</p> <p>How to contribute</p> <ol> <li>Fork it!</li> <li>Checkout the dev branch <code>git checkout dev</code></li> <li>Create your feature branch: <code>git checkout -b my-new-feature</code></li> <li>Commit your changes: <code>git commit -am 'Add some feature'</code></li> <li>Push to the branch: <code>git push origin my-new-feature</code></li> <li>Submit a pull request in the dev branch</li> </ol> <p>If you are new on Github environment, we recommend you to read the first contribution guide.</p> <p>Follow the development environment setup documentation to prepare your workstation with prerequisites.</p>"},{"location":"contribute/code/#constraints","title":"Constraints","text":"<p>Respect PEP 257 -- Docstring conventions.  For each class or method add a description with summary, input parameter, returned parameter,  type of parameter</p> <pre><code>def my_method(my_parameter):\n\"\"\"\n    Description of he method\n    :param my_parameter: description of he parameter\n    :type my_parameter: str\n    \"\"\"\n    pass\n</code></pre> <p>Respect PEP 8 -- Style Guide for Python Code We recommend the usage of an IDE like Pycharm</p>"},{"location":"contribute/documentation/","title":"Contributing to the documentation","text":"<p>The documentation is written in markdown and then generated with mkdocs. Required libraries are installed if you've followed the development environment documentation of the project.</p> <p>Graphs and diagrams are generated by the Mermaid library.</p> <p>Update the documentation in the <code>docs</code> folder placed in the root of the project.</p> <p>Run dev server locally to check the result <pre><code>mkdocs serve -a 0.0.0.0:4000\n</code></pre></p> <p>The page is available on http://127.0.0.1:4000.</p> <p>Send a pull request then to propose your changes to the project.</p>"},{"location":"contribute/documentation/#notes","title":"Notes","text":""},{"location":"contribute/documentation/#reset-your-gh-pages-branch-to-match-the-upstream","title":"Reset your gh-pages branch to match the upstream","text":"<p>If you've built mkdocs and published a version in your fork for testing, your <code>gh-pages</code> branch will differ from the  upstream repository. </p> <p>To reset your local <code>gh-pages</code>, follow the procedure below: <pre><code># delete local branch\ngit branch -D gh-pages\n# delete remote branch (fork here is your remote. Replace by origin if needed)\ngit push -d fork gh-pages\n# checkout gh-pages\ngit checkout --orphan gh-pages\n# pull last version (upstream is the remote name of the main repo)\ngit pull upstream gh-pages\n# (optional) force push to your fork to override changes\ngit push -f fork gh-pages\n# go back to your original branch\ngit checkout master\n</code></pre></p>"},{"location":"dev/db-erd/","title":"Database Entity Relationship Diagrams","text":"erDiagram     TOWER_SERVER {         string name         string host         string token         bool secure         bool ssl_verify     }      JOB_TEMPLATE {         string name         int tower_id         json survey     }      OPERATION {         string name         string description         enum type         bool auto_accept         bool auto_process         int process_timeout_second     }      SERVICE {         string name         string description         blob image     }      REQUEST {         json fill_in_survey         date date_submitted         date date_complete         int tower_job_id         enum state         datetime periodic_task_date_expire         string failure_message     }      INSTANCE {         string name         json spec         enum state     }      SUPPORT {         string title         enum state         date date_opened         date date_closed     }      REQUEST_MESSAGE {         date creation_date         string content     }      SUPPORT_MESSAGE {         date creation_date         string content     }      JOB_TEMPLATE ||--o{ TOWER_SERVER: has     OPERATION ||--o{ JOB_TEMPLATE: has     OPERATION ||--o{ SERVICE: has     REQUEST ||--o{ OPERATION: has     REQUEST |o--|| PERDIODIC_TASK: has     REQUEST ||--o{ INSTANCE: has     INSTANCE }|--o{ USER: has     SUPPORT ||--o{ INSTANCE: has     SUPPORT ||--o{ USER: openned_by     REQUEST_MESSAGE ||--o{ REQUEST: has     REQUEST_MESSAGE ||--o{ USER: from     SUPPORT_MESSAGE ||--o{ SUPPORT: has     SUPPORT_MESSAGE ||--o{ USER: from"},{"location":"dev/dev-env/","title":"Setup a development environment","text":""},{"location":"dev/dev-env/#pre-requisites","title":"Pre requisites","text":""},{"location":"dev/dev-env/#tools","title":"Tools","text":"<p>Following tools need to be installed on your workstation:</p> <ul> <li>Docker</li> <li>Docker-compose</li> <li>Python 3.9</li> <li>Python virtualenv</li> <li>Poetry</li> <li>npm 8</li> </ul>"},{"location":"dev/dev-env/#system-packages","title":"System packages","text":"<p>Ubuntu based OS: <pre><code>sudo apt-get install libmysqlclient-dev graphviz default-mysql-client libsqlite3-dev libsasl2-dev python3-dev libldap2-dev libssl-dev libpq-dev\n</code></pre></p> <p>CentOS/RedHat/Fedora <pre><code>sudo yum install mysql-devel graphviz mysql libsq3-devel libpq-devel\n</code></pre></p>"},{"location":"dev/dev-env/#start-a-development-environment","title":"Start a development environment","text":"<p>The development environment is composed of 4 parts:</p> <ul> <li>Docker compose: The Docker compose file is used to deploy all required components such as the database and the message broker</li> <li>Celery worker: The Celery worker is a separated process that receive tasks from the main Django process to be executed asynchronously</li> <li>Celery beat: Celery beat is a periodic task scheduler that send task into the celery worker based on a frequency. This part is used by Squest to check the status of executed Tower job</li> <li>Django built in web server: Integrated web server used only for development purpose. main process of the application that serve the Web Ui and the API</li> </ul>"},{"location":"dev/dev-env/#docker-compose","title":"Docker compose","text":"<p>Run the Docker compose file with only required services to bring up database, message broker and other required system <pre><code>docker-compose -f docker-compose.yml  -f dev.docker-compose.yml up db phpmyadmin rabbitmq redis-cache\n</code></pre> If you use postgreSQL, update docker/environment_variables/squest.env, then run <pre><code>docker-compose -f docker-compose.yml  -f psql.docker-composer.yml -f dev.docker-compose.yml up db phpmyadmin rabbitmq redis-cache\n</code></pre></p>"},{"location":"dev/dev-env/#javascript-libraries","title":"Javascript libraries","text":"<p>Install JS libs (npm need to be installed) <pre><code>npm install\n</code></pre></p>"},{"location":"dev/dev-env/#python-environment","title":"Python environment","text":"<p>Initializing and installing python libraries with Poetry <pre><code>poetry install\n</code></pre></p> <p>Go into the python virtual env <pre><code>poetry shell\n</code></pre></p> <p>Create the database with Django migration script <pre><code>python manage.py migrate\n</code></pre></p> <p>Collect static files <pre><code>python manage.py collectstatic --noinput\n</code></pre></p> <p>Insert default data <pre><code>python manage.py insert_default_data\n</code></pre></p>"},{"location":"dev/dev-env/#celery-worker-and-periodic-task-scheduler","title":"Celery worker and periodic task scheduler","text":"<p>Run Celery process for async tasks from a new terminal <pre><code>poetry shell\ncelery -A service_catalog worker -l info\n</code></pre></p> <p>Run Celery beat for periodic tasks from a new terminal <pre><code>poetry shell\ncelery -A service_catalog worker --beat -l info\n</code></pre></p>"},{"location":"dev/dev-env/#django-integrated-web-server","title":"Django integrated web server","text":"<p>This next command should be executed from your IDE.</p> <p>Run django dev server <pre><code>poetry shell\npython manage.py runserver\n</code></pre></p> <p>Settings are placed into the <code>squest/settings.py</code> file which is a standard Django core settings file.</p>"},{"location":"dev/dev-env/#commands","title":"Commands","text":"<p>To clean all Celery pending tasks <pre><code>poetry shell\ncelery -A restapi purge\n</code></pre></p>"},{"location":"dev/dev-env/#execute-tests","title":"Execute tests","text":"<p>Run unit tests <pre><code>poetry shell\npython manage.py test\n</code></pre></p> <p>Run code coverage <pre><code>coverage run --source='.' manage.py test\n# generate terminal report\ncoverage report\n# generate HTML report\ncoverage html\n</code></pre></p>"},{"location":"dev/dev-env/#phpmyadmin","title":"phpMyAdmin","text":"<p>phpMyAdmin is exposed on localhost:8082.</p> <ul> <li>server : db</li> <li>user : root</li> <li>password : p@ssw0rd</li> </ul>"},{"location":"dev/instance-state-machine/","title":"Instance state machine","text":"graph TB     start((Start))     start --&gt; pending     pending[PENDING]     provisioning[PROVISIONING]     provision_failed[PROVISION_FAILED]     available[AVAILABLE]     updating[UPDATING]     update_failed[UPDATE_FAILED]     deleting[DELETING]     delete_failed[DELETE_FAILED]     deleted[DELETED]     archived[ARCHIVED]     pending --&gt; provisioning     provision_ok{provision ok?}     style provision_ok fill:#80CBC4     provisioning --&gt; provision_ok     provision_ok --&gt; |No| provision_failed     provision_ok --&gt; |Yes| available     provision_failed --&gt; |retry| provisioning     available --&gt; |update| updating     update_ok{update ok?}     style update_ok fill:#80CBC4     updating --&gt; update_ok     update_ok --&gt; |No| update_failed     update_ok --&gt; |Yes| available     available --&gt; |Delete| deleting     deletion_ok{deletion ok?}     style deletion_ok fill:#80CBC4     deleting --&gt; deletion_ok     deletion_ok --&gt; |No| delete_failed     deletion_ok --&gt; |Yes| deleted     deleted --&gt; |archive| archived     delete_failed --&gt; |Retry| deleting"},{"location":"dev/release/","title":"Release new version of Squest","text":""},{"location":"dev/release/#prepare","title":"Prepare","text":"<ul> <li>Create a <code>release</code> branch</li> <li>Update the <code>CHANGELOG.md</code></li> <li>Delete all migration file since the last release in all Django app</li> <li>Make migration files</li> <li>Update <code>Squest/version.py</code> with release version</li> <li>Update version in Poetry <code>pyproject.toml</code></li> <li>PR --&gt; master</li> <li>Last review and rebase/merge master</li> </ul>"},{"location":"dev/release/#ci-execution","title":"CI execution","text":"<p>From here the CI will:</p> <ul> <li>Build the new docker image</li> <li>Push the image in quay.io</li> <li>Build and publish the mkdocs documentation into GitHub pages</li> </ul>"},{"location":"dev/release/#post-ci","title":"Post CI","text":"<ul> <li>Tag the branch with the new version and push the tag</li> <li>Create a release from the pushed tag on GitHub</li> <li>Create new dev branch</li> <li>Update <code>version.py</code> with new beta version</li> <li>Update poetry version in <code>pyproject.toml</code> with new beta version (E.g: <code>1.8.3b</code>)</li> <li>Bump poetry libraries</li> <li>Force push the new dev branch to upstream</li> <li>Notify community in Gitter</li> </ul>"},{"location":"dev/request-state-machine/","title":"Request state machine","text":"graph TB      start((Start))     submitted[SUBMITTED]     start --&gt; submitted     auto_accept{auto accept?}     style auto_accept fill:#80CBC4     instance_pending([instance pending])     submitted --&gt; instance_pending     instance_pending --&gt; auto_accept     accepted[ACCEPTED]     auto_accept --&gt;|Yes| accepted     admin_action_1{admin action}     style admin_action_1 fill:#80DEEA     auto_accept --&gt;|No| admin_action_1     need_info[NEED_INFO]     admin_action_1 --&gt;|need_info| need_info     admin_action_1 --&gt;|accept| accepted     rejected[REJECTED]     need_info --&gt;|reject| rejected     need_info --&gt;|Submit| submitted     canceled[CANCELED]     need_info --&gt; |cancel|canceled     rejected --&gt; |cancel|canceled     submitted --&gt; |cancel|canceled     submitted --&gt;|reject| rejected     canceled --&gt; |delete| deleted     deleted((Deleted))     auto_pocess{auto process?}     style auto_pocess fill:#80CBC4     accepted --&gt; auto_pocess     accepted --&gt;|reject| rejected     auto_pocess --&gt; |Yes| operation_type     admin_action_2{admin action}     auto_pocess --&gt; |No| admin_action_2     admin_action_2 --&gt; |process| operation_type     style admin_action_2 fill:#80DEEA     operation_type{Operation type?}     style operation_type fill:#80CBC4     instance_creating([instance_creating])     instance_updating([instance_updating])     instance_deleting([instance_deleting])     operation_type --&gt; |CREATE| instance_creating     operation_type --&gt; |UPDATE| instance_updating     operation_type --&gt; |DELETE| instance_deleting     processing[PROCESSING]        instance_creating --&gt; processing     instance_updating --&gt; processing     instance_deleting --&gt; processing     processing_ok{processing ok?}     style processing_ok fill:#80CBC4     processing --&gt; processing_ok     complete[COMPLETE]      failed[FAILED]      processing_ok --&gt; |Yes| complete     processing_ok --&gt; |No| failed     failed --&gt; |retry| processing     failed --&gt; |cancel| accepted     archived[ARCHIVED]      complete --&gt;|archive| archived     archived --&gt;|unarchive| complete"},{"location":"dev/plugins/validators/","title":"Field validators","text":"<p>Field validators are python modules that can be added as plugin to perform a custom check on a form field.</p>"},{"location":"dev/plugins/validators/#create-a-field-validator","title":"Create a field validator","text":"<p>Validators are based on the Django and Django Rest Framework API.</p> <ul> <li>Django validators doc</li> <li>Django Rest framework validators doc</li> </ul> <p>Create a python file that contains 2 methods that receive a value as parameter. The methods must be named <code>validate_api</code> and <code>validate_ui</code>. Validators methods takes a value and raises a ValidationError if it does not meet some criteria.</p> <p>The <code>validate_api</code> must raise a <code>django.core.exceptions.ValidationError</code> in case of error.</p> <p>The <code>validate_ui</code> must raise a <code>rest_framework.serializers.ValidationError</code> in case of error.</p> <p>Here is an example of file that check if the given value of the field is even: <pre><code>from django.core.exceptions import ValidationError\nfrom rest_framework import serializers\nfrom django.utils.translation import ugettext as _\n\n\ndef validate_api(value):\n    if int(value) % 2 != 0:\n        raise serializers.ValidationError('This field must be an even number.')\n\n\ndef validate_ui(value):\n    try:\n        if int(value) % 2 != 0:\n            raise ValidationError(\n                _('%(value)s is not an even number'),\n                params={'value': value},\n            )\n    except ValueError:\n        # given value cannot be cast into an integer\n        pass\n</code></pre></p>"},{"location":"dev/plugins/validators/#add-your-validators-to-the-deployment","title":"Add your validators to the deployment","text":"<p>Place your scripts in a folder on the machine that host Squest. E.g: <pre><code>tree /tmp/squest_plugins \n\n/tmp/squest_plugins\n\u2514\u2500\u2500 field_validators\n    \u251c\u2500\u2500 even_number.py\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 superior_to_10.py\n</code></pre></p> <p>Update the <code>docker-compose.yml</code> file to add a volume that map your script folder to the plugin folder in the Django container: <pre><code>  django: &amp;django\nimage: quay.io/hewlettpackardenterprise/squest:latest\nenv_file: docker/environment_variables/squest.env\nenvironment:\nWAIT_HOSTS: db:3306,rabbitmq:5672\nvolumes:\n- django_static:/app/static\n- django_media:/app/media\n- backup:/app/backup\n- /tmp/squest_plugins/field_validators:/app/plugins/field_validators  # update this line\ndepends_on:\n- db\n- rabbitmq\n- celery-worker\n- celery-beat\n- redis-cache\n</code></pre></p>"},{"location":"dev/plugins/validators/#set-validator-to-a-form-field","title":"Set validator to a form field","text":"<p>In squest, go into <code>Service Catalog --&gt; Manage Services --&gt; Operations --&gt; Survey</code></p> <p>For each field of the Tower survey of the selected operation you can now add one or more validator.</p>"},{"location":"installation/backup/","title":"Backup","text":"<p>Persistent data of squest are:</p> <ul> <li>database</li> <li>media folder (used to store images)</li> </ul> <p>An integrated backup solution based on django-dbbackup is  available. Once enabled, backups are placed in the <code>/app/backup</code> folder of the <code>celery-beat</code> container.</p>"},{"location":"installation/backup/#execute-a-backup-manually","title":"Execute a backup manually","text":"<p>Execute the command below against the celery-beat container: <pre><code>docker-compose exec celery-beat python manage.py dbbackup --clean\ndocker-compose exec celery-beat python manage.py mediabackup --clean\n</code></pre></p> <p>Get the backup list <pre><code>docker-compose exec celery-beat python manage.py listbackups\n</code></pre></p> <p>Output example: <pre><code>Name                                            Datetime            \ndefault-3095326a6ee7-2021-09-10-112953.dump     09/10/21 11:29:53   \n3095326a6ee7-2021-09-10-113338.tar              09/10/21 11:33:38 \n</code></pre></p> <p>Data are placed by default in a mounted volume named <code>squest_backup</code>. You can get the real path on the host by inspecting  the volume: <pre><code>docker volume inspect squest_backup\n</code></pre></p> <p>Output example: <pre><code>[\n{\n\"CreatedAt\": \"2021-09-13T09:42:26+02:00\",\n\"Driver\": \"local\",\n\"Labels\": {\n\"com.docker.compose.project\": \"squest\",\n\"com.docker.compose.version\": \"1.28.4\",\n\"com.docker.compose.volume\": \"backup\"\n},\n\"Mountpoint\": \"/var/lib/docker/volumes/squest_backup/_data\",\n\"Name\": \"squest_backup\",\n\"Options\": null,\n\"Scope\": \"local\"\n}\n]\n</code></pre></p> <p>In this example, data are placed in the mount point <code>/var/lib/docker/volumes/squest_backup/_data</code> on the host.  Files in this path need to be placed in a safe place.</p>"},{"location":"installation/backup/#enable-automatic-backup","title":"Enable automatic backup","text":"<p>Enable automatic backup by updating your environment configuration file <code>docker/environment_variables/squest.env</code>: <pre><code>BACKUP_ENABLED=True\n</code></pre></p> <p>By default, backup is performed every day at 1 AM.</p> <p>Note</p> <p>Follow the full configuration documentation to know all available flags for the backup service.</p>"},{"location":"installation/backup/#restore","title":"Restore","text":"<p>Start Squest services like for the initial deployment <pre><code>docker-compose up\n</code></pre></p> <p>Copy you backup files into the <code>squest_backup</code> mount point of your host <pre><code>sudo cp &lt;backup_folder_path&gt;/* &lt;squest_backup_mount_point&gt;\n</code></pre></p> <p>E.g: <pre><code>sudo cp ~/Desktop/squest_backup/* /var/lib/docker/volumes/squest_backup/_data/\n</code></pre></p> <p>Check that the tool can list your backup files <pre><code>docker-compose exec celery-beat python manage.py listbackups\n</code></pre></p> <p>Restore the database and media folder <pre><code>docker-compose exec celery-beat python manage.py dbrestore\ndocker-compose exec celery-beat python manage.py mediarestore </code></pre></p> <p>Note</p> <p>Get more info on dbrestore and mediarestore command arguments on the  official doc.</p>"},{"location":"installation/ldap/","title":"LDAP authentication backend","text":""},{"location":"installation/ldap/#default-configuration","title":"Default configuration","text":"<p>The configuration is loaded from environment variables file placed in the folder <code>docker/environment_variables</code>.</p>"},{"location":"installation/ldap/#ldap_enabled","title":"LDAP_ENABLED","text":"<p>Default: <code>False</code></p> <p>Set to <code>True</code> to enable LDAP based authentication.  </p>"},{"location":"installation/ldap/#auth_ldap_server_uri","title":"AUTH_LDAP_SERVER_URI","text":"<p>Default: <code>ldap:port</code></p> <p>Set the LDAP serveur URI and port</p>"},{"location":"installation/ldap/#auth_ldap_bind_dn","title":"AUTH_LDAP_BIND_DN","text":"<p>Default: <code>cn=service_account_name,ou=Applications,o=domain.com</code></p> <p>Set the LDAP DN to authenticate to the LDAP serveur</p>"},{"location":"installation/ldap/#auth_ldap_bind_password","title":"AUTH_LDAP_BIND_PASSWORD","text":"<p>Default: <code>NONE</code></p> <p>Associated to AUTH_LDAP_BIND_DN, password used to authenticate DN</p>"},{"location":"installation/ldap/#auth_ldap_user_search","title":"AUTH_LDAP_USER_SEARCH","text":"<p>Default: <code>ou=People,o=domain.com</code></p> <p>User search patern</p>"},{"location":"installation/ldap/#auth_ldap_attr_firstname","title":"AUTH_LDAP_ATTR_FIRSTNAME","text":"<p>Default: <code>givenName</code></p> <p>set the LDAP \"first_name\" attribute</p>"},{"location":"installation/ldap/#auth_ldap_attr_lastname","title":"AUTH_LDAP_ATTR_LASTNAME","text":"<p>Default: <code>sn</code></p> <p>set the LDAP \"last_name\" attribute</p>"},{"location":"installation/ldap/#auth_ldap_attr_mail","title":"AUTH_LDAP_ATTR_MAIL","text":"<p>Default: <code>mail</code></p> <p>set the LDAP \"email\" attribute</p>"},{"location":"installation/ldap/#advanced-configuration","title":"Advanced configuration","text":"<p>LDAP can be activated by setting the environment variable <code>LDAP_ENABLED</code> to <code>True</code> in your configuration: <pre><code>LDAP_ENABLED=True\n</code></pre></p> <p>You can overide the given configuration by using the <code>ldap.docker-compose.yml</code> file and mount your custom <code>ldap_config.py</code>. The configuration is based on the Django plugin <code>django-auth-ldap</code>. You can follow the official documentation to know available configuration options.</p> <p>Example of <code>ldap_config.py</code>:</p> <pre><code>import os\nimport ldap\nfrom django_auth_ldap.config import LDAPSearch\n\nprint(\"LDAP config loaded\")\n# -----------------------\n# LDAP auth backend\n# -----------------------\nAUTH_LDAP_SERVER_URI = \"ldaps://ad.example.com:636\"\nAUTH_LDAP_BIND_DN = \"CN=my_app,OU=Service_Accounts,DC=example,DC=com\"\nAUTH_LDAP_BIND_PASSWORD = os.environ.get('AUTH_LDAP_BIND_PASSWORD', None)\nAUTH_LDAP_USER_SEARCH = LDAPSearch(\"OU=Service_Accounts,DC=example,DC=com\", ldap.SCOPE_SUBTREE, \"(uid=%(user)s)\")\nLDAP_CA_FILE_PATH = \"/usr/local/share/ca-certificates/ldap_ca.crt\"  # default path in ldap docker compose file\nAUTH_LDAP_CONNECTION_OPTIONS = {\n    ldap.OPT_X_TLS_CACERTFILE: LDAP_CA_FILE_PATH,\n    ldap.OPT_X_TLS_REQUIRE_CERT: ldap.OPT_X_TLS_ALLOW,\n    ldap.OPT_X_TLS_NEWCTX: 0\n}\nAUTH_LDAP_USER_ATTR_MAP = {\n    \"first_name\": \"givenName\",\n    \"last_name\": \"sn\",\n    \"email\": \"uid\"\n}\n</code></pre> <p>Update the <code>ldap.docker-compose.yml</code> file to mount your configuration file and the CA certificate of the LDAP server (if LDAPS is used) in django and celery containers: <pre><code>  django:\nvolumes:\n- ./Squest/ldap_config.py:/app/Squest/ldap_config.py\n- ./docker/certs/ldap_ca.crt:/usr/local/share/ca-certificates/ldap_ca.crt\ncelery-worker:\nvolumes:\n- ./Squest/ldap_config.py:/app/Squest/ldap_config.py\n- ./docker/certs/ldap_ca.crt:/usr/local/share/ca-certificates/ldap_ca.crt\ncelery-beat:\nvolumes:\n- ./Squest/ldap_config.py:/app/Squest/ldap_config.py\n- ./docker/certs/ldap_ca.crt:/usr/local/share/ca-certificates/ldap_ca.crt\n</code></pre></p> <p>Run docker compose with the ldap config <pre><code>docker-compose -f docker-compose.yml -f docker-compose.override.yml -f ldap.docker-compose.yml up\n</code></pre></p>"},{"location":"installation/tls/","title":"TLS","text":"<p>This section explains how to add TLS support on Squest.</p> <p>The TLS endpoint is managed by a reverse proxy on top of the default web server. This is not the only way to handle this part. Many tools like Nginx, Apache or Traefik could be used, and you are free  to use the one you want instead of this proposed configuration. The only recommendation we have is to keep the default nginx web server as main http entrypoint.</p>"},{"location":"installation/tls/#tls-using-caddy","title":"TLS using Caddy","text":"<p>Caddy is a powerful webserver written in Go which provide a  reverse proxy feature.</p> <p>In the example below, we'll use self-signed certificate. Follow the official documentation  if you want to configure it to use an ACME like \"Let's Encrypt\" instead.</p> <p>Place your certificate and key file in the folder <code>docker/certs</code>.</p> <p>E.g: <pre><code>docker\n\u251c\u2500\u2500 Caddyfile\n\u251c\u2500\u2500 certs\n\u2502    \u251c\u2500\u2500 squest.crt\n\u2502    \u2514\u2500\u2500 squest.key\n</code></pre></p> <p>Update the <code>docker/Caddyfile</code> with the FQDN of your server. By default, the FQDN is set to <code>squest.domain.local</code> <pre><code>squest.domain.local {   # This line should match the ALLOWED_HOSTS in your Squest environment\n    reverse_proxy nginx:8080\n    encode gzip zstd\n    tls /etc/ssl/private/squest.crt /etc/ssl/private/squest.key\n    # or:\n    # tls /etc/ssl/private/cert.pem\n\n    log {\n      level error\n    }\n}\n</code></pre></p> <p>Update the <code>ALLOWED_HOSTS</code> environment variable from the configuration file <code>docker/environment_variables/squest.env</code>  to match your FQDN. <pre><code>ALLOWED_HOSTS=squest.domain.local\n</code></pre></p> <p>Start docker compose with the TLS configuration: <pre><code>docker-compose -f docker-compose.yml -f tls.docker-compose.yml up\n</code></pre></p> <p>The squest service is then reachable via HTTP and HTTPS standard ports (80/443).</p> <ul> <li>http://squest.domain.local</li> <li>https://squest.domain.local</li> </ul>"},{"location":"installation/upgrade/","title":"Squest upgrade","text":"<p>This documentation aims at explaining how to perform an upgrade of squest on new release.</p> <p>Note</p> <p>Read the changelog of the version before performing any update to know what are the breaking changes or specific requirements of the new release.</p> <p>Note</p> <p>We recommend performing a manual backup before any upgrade. See the dedicated backup doc</p> <p>Stop all containers that use the Squest image <pre><code>docker-compose kill django celery-worker celery-beat\n</code></pre></p> <p>Starting from here, the maintenance page should appear automatically in place of the Squest app.</p> <p>Pull the new image <pre><code>docker pull quay.io/hewlettpackardenterprise/squest:&lt;version&gt;\n</code></pre></p> <p>E.g <pre><code>docker pull quay.io/hewlettpackardenterprise/squest:latest\n</code></pre></p> <p>Start back containers <pre><code>docker-compose start django celery-worker celery-beat\n</code></pre></p>"},{"location":"manual/api/","title":"REST API","text":""},{"location":"manual/api/#authentication","title":"Authentication","text":"<p>Squest API allows tokens and session authentication. The API token management is available in the Tokens section of your profile page.</p> <p>A token is a unique identifier mapped to a Squest user account. Each user may have one or more tokens which can be used for  authentication when making REST API requests. A token can have an expiration date to grant temporary access to an external client.  </p> <p>Usage example with curl <pre><code>export SQUEST_TOKEN=d97ebdbeccf5fc3fba740e8e89048e3d453bd729\ncurl -X GET http://127.0.0.1:8000/api/resource_tracker/resource_group/ \\\n-H \"Authorization: Bearer $SQUEST_TOKEN\"\n</code></pre></p> <p>Usage example in Ansible URI module: <pre><code>- name: Get info from squest\nhosts: localhost\nconnection: local\ngather_facts: false\n\nvars:\nsquest_api: \"http://127.0.0.1:8000/api/\"\nsquest_token: d97ebdbeccf5fc3fba740e8e89048e3d453bd729\nsquest_bearer_token: \"Bearer {{ squest_token }}\"\n\ntasks:\n- name: Get all resource group\nuri:\nurl: \"{{ squest_api }}resource_tracker/resource_group/\"\nheaders:\nAuthorization: \"{{ squest_bearer_token }}\"\nmethod: GET\nstatus_code: 200\nbody_format: json\nregister: output\n\n- debug:\nvar: output\n</code></pre></p>"},{"location":"manual/api/#api-documentation","title":"API documentation","text":"<p>The API documentation is available on the URL \"/swagger\" of your Squest instance. </p> <p>E.g: <code>http://192.168.58.128/swagger/</code></p>"},{"location":"manual/filters/","title":"JSON Accessor","text":"<p>To access a field in json, simply describe the path by separating the levels by dots. The value of field to filter must be after an equal. It is possible to make a filter on several fields which are separated by commas.</p>"},{"location":"manual/filters/#examples","title":"Examples","text":""},{"location":"manual/filters/#instance-spec-with-string","title":"Instance spec with string","text":"<pre><code>{\n\"my_first_field\": \"my_value\"\n}\n</code></pre> <p>Examples of lookup string that can be used in the filter.</p> <pre><code>my_first_field=my_value\nmy_first_field='my_value'\nmy_first_field=\"my_value\"\n</code></pre>"},{"location":"manual/filters/#instance-spec-with-dict","title":"Instance spec with dict","text":"<pre><code>{\n\"my_first_field\": {\n\"my_second_field\": \"my_value\"\n}\n}\n</code></pre> <p>Example of lookup string that can be used in the filter.</p> <pre><code>my_first_field.my_second_field=my_value\n</code></pre>"},{"location":"manual/filters/#instance-spec-with-list","title":"Instance spec with list","text":"<pre><code>{\n\"my_first_field\": [\n\"my_value1\",\n\"my_value2\"\n]\n}\n</code></pre> <p>Example of lookup string that can be used in the filter.</p> <pre><code>my_first_field.0=my_value1\n</code></pre>"},{"location":"manual/filters/#instance-spec-on-two-fields","title":"Instance spec on two fields","text":"<pre><code>{\n\"my_first_field\": {\n\"my_second_field\": [\n\"my_value1\",\n\"my_value2\"\n]\n},\n\"my_integer_field\": 1\n}\n</code></pre> <p>Example of lookup string that can be used in the filter.</p> <pre><code>my_first_field.my_second_field.0=my_value1,my_integer_field=1\n</code></pre>"},{"location":"manual/filters/#instance-spec-with-regex","title":"Instance spec with regex","text":"<pre><code>{\n\"dns_name\": \"my_hostname.domain.example\"\n}\n</code></pre> <p>Lookup string example:</p> <pre><code>dns_name.regex=my_hostname\n</code></pre>"},{"location":"manual/jinja/","title":"Jinja templating","text":"<p>Jinja templating can be use in some part of the Squest configuration.</p> <p>Jinja templating usage with <code>{{ instance }}</code> as context:</p> <ul> <li>Custom links</li> <li>Operation survey default field config</li> </ul> <p>Jinja templating usage with <code>{{ request }}</code> as context:</p> <ul> <li>Operation job template config (inventory, credentials, tags, limit)</li> </ul>"},{"location":"manual/jinja/#examples","title":"Examples","text":""},{"location":"manual/jinja/#string-with-no-jinja","title":"String with no jinja","text":"<p>Even if the context is sent, a hard coded string can be used without using it.</p> Jinja string My hard coded value Result My hard coded value"},{"location":"manual/jinja/#using-the-instance-as-context","title":"Using the instance as context","text":"<p>Accessing instance name:</p> Instance context <pre><code>{\n\"id\": 31,\n\"state\": \"AVAILABLE\",\n\"resources\": [],\n\"billing_group\": null,\n\"spoc\": {\n\"id\": 2,\n\"username\": \"admin\",\n\"email\": \"admin@squest.domain\",\n\"profile\": {\n\"request_notification_enabled\": true,\n\"support_notification_enabled\": true,\n\"request_notification_filters\": [],\n\"instance_notification_filters\": []\n},\n\"first_name\": \"\",\n\"last_name\": \"\",\n\"is_staff\": true,\n\"is_superuser\": true,\n\"is_active\": true,\n\"billing_groups\": []\n},\n\"name\": \"my_instance\",\n\"spec\": {\n\"test\": 2\n},\n\"user_spec\": {},\n\"date_available\": null,\n\"service\": 1\n}\n</code></pre> Jinja string My hard coded value with {{ instance.name }} Result My hard coded value with my_instance <p>Accessing instance spec:</p> Instance context <pre><code>{\n\"id\": 31,\n\"state\": \"AVAILABLE\",\n\"resources\": [],\n\"billing_group\": null,\n\"spoc\": {\n\"id\": 2,\n\"username\": \"admin\",\n\"email\": \"admin@squest.domain\",\n\"profile\": {\n\"request_notification_enabled\": true,\n\"support_notification_enabled\": true,\n\"request_notification_filters\": [],\n\"instance_notification_filters\": []\n},\n\"first_name\": \"\",\n\"last_name\": \"\",\n\"is_staff\": true,\n\"is_superuser\": true,\n\"is_active\": true,\n\"billing_groups\": []\n},\n\"name\": \"my_instance\",\n\"spec\": {\n\"os\": \"linux\"\n},\n\"user_spec\": {},\n\"date_available\": null,\n\"service\": 1\n}            </code></pre> Jinja string  {{ instance.spec.os }} Result linux <p>Note</p> <p>The <code>spec</code> and <code>user_spec</code> variables are only usable on Update or Delete operations as the pending instance does not contain any spec before its provisioning.</p> <p>Note</p> <p>If the given variable key doesn't exist, the default value will be set to an empty string.</p>"},{"location":"manual/jinja/#using-the-request-as-context","title":"Using the request as context","text":"<p>This example, used in the \"default limit\" of the operation job template config, allows to automatically configure the inventory limit following the given \"dns\" field of the survey.</p> Instance context <pre><code>{\n\"id\": 32,\n\"instance\": {\n\"id\": 31,\n\"state\": \"PENDING\",\n\"resources\": [],\n\"billing_group\": null,\n\"spoc\": {\n\"id\": 2,\n\"username\": \"admin\",\n\"email\": \"admin@squest.domain\",\n\"profile\": {\n\"request_notification_enabled\": true,\n\"support_notification_enabled\": true,\n\"request_notification_filters\": [],\n\"instance_notification_filters\": []\n},\n\"first_name\": \"\",\n\"last_name\": \"\",\n\"is_staff\": true,\n\"is_superuser\": true,\n\"is_active\": true,\n\"billing_groups\": []\n},\n\"name\": \"my-instance\",\n\"spec\": {                        },\n\"user_spec\": {},\n\"date_available\": null,\n\"service\": 1\n},\n\"user\": {\n\"id\": 2,\n\"username\": \"admin\",\n\"email\": \"admin@squest.domain\",\n\"profile\": {\n\"request_notification_enabled\": true,\n\"notification_filters\": []\n},\n\"first_name\": \"\",\n\"last_name\": \"\",\n\"is_staff\": true,\n\"is_superuser\": true,\n\"is_active\": true,\n\"billing_groups\": []\n},\n\"fill_in_survey\": {\n\"dns\": \"vm-name.domain.com\"\n},\n\"admin_fill_in_survey\": {},\n\"date_submitted\": \"2022-09-29T16:01:45.409615+02:00\",\n\"date_complete\": null,\n\"date_archived\": null,\n\"tower_job_id\": null,\n\"state\": \"ACCEPTED\",\n\"operation\": 7,\n\"approval_step\": null\n}         </code></pre> Jinja string  {{ request.fill_in_survey.dns }} Result vm-name.domain.com"},{"location":"manual/jinja/#dict-access","title":"Dict access","text":"Instance JSON spec <pre><code>{\n\"spec\": {\n\"os\": {\n\"linux\": \"ubuntu\"\n}\n}               }\n</code></pre> Jinja string {{ instance.spec.os['linux'] }} Result ubuntu"},{"location":"manual/jinja/#list-access","title":"List access","text":"Instance JSON spec <pre><code>{\n\"spec\": {\n\"os\": [\"linux\", \"windows\"]\n},\n\"user_spec\": {}\n}\n</code></pre> Jinja string {{ spec.os[1] }} Result windows"},{"location":"manual/jinja/#filters","title":"Filters","text":"<p>Jinja filters can also be used to transform variables.</p> <p>For example, the 'select multiple' field type requires a list of string separated with a carriage return marker (<code>\\n</code>).</p> Instance JSON spec <pre><code>{\n\"spec\": {\n\"os\": [\"linux\", \"windows\"]\n},\n\"user_spec\": {}\n}\n</code></pre> Jinja string {{ spec.os | join('\\n') }} Result linux\\nwindows"},{"location":"manual/jinja/#conditions","title":"Conditions","text":"<p>In this example, the target inventory ID is changed following a survey variable <code>is_prod</code>.</p> Instance JSON spec <pre><code>{\n\"spec\": {\n\"is_prod\": true\n},\n\"user_spec\": {}\n}\n</code></pre> Jinja string {% if is_prod %}1{% else %}3{% endif %} Result linux\\nwindows"},{"location":"manual/metrics/","title":"Prometheus metrics","text":"<p>Squest supports optionally exposing native Prometheus metrics from the application.  Prometheus is a popular time series metric platform used for monitoring.</p> <p>Squest exposes metrics at the <code>/metrics</code> HTTP endpoint, e.g. https://squest.domain.local/metrics. </p>"},{"location":"manual/metrics/#squest-config","title":"Squest config","text":"<p>Metrics page is disabled by default. Update your <code>docker/environment_variables/squest.env</code> to enable metrics.</p> <pre><code>METRICS_ENABLED=True\nMETRICS_PASSWORD_PROTECTED=True\nMETRICS_AUTHORIZATION_USERNAME=admin\nMETRICS_AUTHORIZATION_PASSWORD=my_secret_password\n</code></pre>"},{"location":"manual/metrics/#prometheus-config","title":"Prometheus config","text":"<p>Here is an example of prometheus configuration you can use to scrape squest metrics <pre><code>scrape_configs:\n- job_name: 'squest'\nscrape_interval: 30s\nmetrics_path: '/metrics/'\nstatic_configs:\n- targets: ['squest.domain.local']\nscheme: http\nbasic_auth:\nusername: admin\npassword: my_secret_password\n</code></pre></p>"},{"location":"manual/metrics/#exported-metrics","title":"Exported metrics","text":""},{"location":"manual/metrics/#squest_instance_per_service_total","title":"squest_instance_per_service_total","text":"<p>Expose the total number of instance per service.</p> <p>Labels: <code>['service']</code></p> <p>E.g: <pre><code>squest_instance_per_service_total{service=\"Kubernetes\"} 5.0\nsquest_instance_per_service_total{service=\"Openshift\"} 11.0\nsquest_instance_per_service_total{service=\"VMWare\"} 14.0\n</code></pre></p>"},{"location":"manual/metrics/#squest_instance_per_state_total","title":"squest_instance_per_state_total","text":"<p>Expose the total number of instance per state.</p> <p>Labels: <code>['state']</code></p> <p>E.g: <pre><code>squest_instance_per_state_total{state=\"AVAILABLE\"} 2.0\nsquest_instance_per_state_total{state=\"PENDING\"} 28.0\n</code></pre></p>"},{"location":"manual/metrics/#squest_request_per_state_total","title":"squest_request_per_state_total","text":"<p>Expose the total number of request per state.</p> <p>Labels: <code>['state']</code></p> <p>E.g: <pre><code>squest_request_per_state_total{state=\"ACCEPTED\"} 4.0\nsquest_request_per_state_total{state=\"CANCELED\"} 3.0\nsquest_request_per_state_total{state=\"COMPLETE\"} 5.0\nsquest_request_per_state_total{state=\"FAILED\"} 4.0\nsquest_request_per_state_total{state=\"NEED_INFO\"} 2.0\nsquest_request_per_state_total{state=\"PROCESSING\"} 3.0\nsquest_request_per_state_total{state=\"REJECTED\"} 5.0\nsquest_request_per_state_total{state=\"SUBMITTED\"} 4.00\n</code></pre></p>"},{"location":"manual/metrics/#squest_instance_total","title":"squest_instance_total","text":"<p>Total number of instance in squest</p> <p>Labels: <code>['service', 'state', 'billing_group']</code></p> <p>E.g: <pre><code>squest_instance_total{billing_group=\"Orchestration\",service=\"VMWare\",state=\"AVAILABLE\"} 1.0\nsquest_instance_total{billing_group=\"Assurance\",service=\"VMWare\",state=\"AVAILABLE\"} 1.0\nsquest_instance_total{billing_group=\"Orchestration\",service=\"VMWare\",state=\"PENDING\"} 3.0\nsquest_instance_total{billing_group=\"5G\",service=\"VMWare\",state=\"PENDING\"} 6.0\nsquest_instance_total{billing_group=\"Assurance\",service=\"VMWare\",state=\"PENDING\"} 3.0\nsquest_instance_total{billing_group=\"Assurance\",service=\"Openshift\",state=\"PENDING\"} 3.0\nsquest_instance_total{billing_group=\"5G\",service=\"Openshift\",state=\"PENDING\"} 3.0\nsquest_instance_total{billing_group=\"Orchestration\",service=\"Openshift\",state=\"PENDING\"} 4.0\nsquest_instance_total{billing_group=\"Orchestration\",service=\"Kubernetes\",state=\"PENDING\"} 1.0\nsquest_instance_total{billing_group=\"5G\",service=\"Kubernetes\",state=\"PENDING\"} 2.0\nsquest_instance_total{billing_group=\"Assurance\",service=\"Kubernetes\",state=\"PENDING\"} 2.0\nsquest_instance_total{billing_group=\"None\",service=\"Openshift\",state=\"PENDING\"} 1.0\n</code></pre></p>"},{"location":"manual/metrics/#squest_request_total","title":"squest_request_total","text":"<p>Total number of request in squest</p> <p>Labels: <code>['service', 'state']</code></p> <p>E.g: <pre><code>squest_request_total{service=\"VMWare\",state=\"COMPLETE\"} 3.0\nsquest_request_total{service=\"VMWare\",state=\"PROCESSING\"} 2.0\nsquest_request_total{service=\"VMWare\",state=\"ACCEPTED\"} 2.0\nsquest_request_total{service=\"VMWare\",state=\"NEED_INFO\"} 1.0\nsquest_request_total{service=\"VMWare\",state=\"REJECTED\"} 4.0\nsquest_request_total{service=\"VMWare\",state=\"SUBMITTED\"} 1.0\nsquest_request_total{service=\"VMWare\",state=\"FAILED\"} 1.0\nsquest_request_total{service=\"Openshift\",state=\"REJECTED\"} 1.0\nsquest_request_total{service=\"Openshift\",state=\"CANCELED\"} 2.0\nsquest_request_total{service=\"Openshift\",state=\"FAILED\"} 3.0\nsquest_request_total{service=\"Openshift\",state=\"COMPLETE\"} 1.0\nsquest_request_total{service=\"Openshift\",state=\"SUBMITTED\"} 2.0\nsquest_request_total{service=\"Openshift\",state=\"ACCEPTED\"} 2.0\nsquest_request_total{service=\"Kubernetes\",state=\"SUBMITTED\"} 1.0\nsquest_request_total{service=\"Kubernetes\",state=\"COMPLETE\"} 1.0\nsquest_request_total{service=\"Kubernetes\",state=\"CANCELED\"} 1.0\nsquest_request_total{service=\"Kubernetes\",state=\"PROCESSING\"} 1.0\nsquest_request_total{service=\"Kubernetes\",state=\"NEED_INFO\"} 1.0\n</code></pre></p>"},{"location":"manual/metrics/#squest_support_total","title":"squest_support_total","text":"<p>Total number of support</p> <p>Labels: <code>['state']</code></p> <p>E.g: <pre><code>squest_support_total{service=\"VMWare\",state=\"CLOSED\"} 2.0\nsquest_support_total{service=\"VMWare\",state=\"OPENED\"} 1.0\n</code></pre></p>"},{"location":"manual/metrics/#squest_user_total","title":"squest_user_total","text":"<p>Total number of user</p> <p>Labels: <code>['is_superuser']</code></p> <p>E.g: <pre><code>squest_user_total{is_superuser=\"true\"} 1.0\nsquest_user_total{is_superuser=\"false\"} 6.0\n</code></pre></p>"},{"location":"manual/metrics/#squest_team_total","title":"squest_team_total","text":"<p>Total number of team</p> <p>E.g: <pre><code>squest_team_total 3.0\n</code></pre></p>"},{"location":"manual/metrics/#squest_billing_group_total","title":"squest_billing_group_total","text":"<p>Total number of team</p> <p>E.g: <pre><code>squest_billing_group_total 3.0\n</code></pre></p>"},{"location":"manual/metrics/#squest_quota_consumed","title":"squest_quota_consumed","text":"<p>Consumption of quota per billing group and attribute</p> <p>E.g: <pre><code>squest_quota_consumed{billing_group=\"5G\",quota_attribute=\"CPU\"} 22.0\nsquest_quota_consumed{billing_group=\"5G\",quota_attribute=\"Memory\"} 45.0\nsquest_quota_consumed{billing_group=\"Assurance\",quota_attribute=\"CPU\"} 20.0\nsquest_quota_consumed{billing_group=\"Assurance\",quota_attribute=\"Memory\"} 23.0\n</code></pre></p>"},{"location":"manual/metrics/#squest_quota_limit","title":"squest_quota_limit","text":"<p>Limit of quota per billing group and attribute</p> <pre><code>squest_quota_limit{billing_group=\"5G\",quota_attribute=\"CPU\"} 100.0\nsquest_quota_limit{billing_group=\"5G\",quota_attribute=\"Memory\"} 50.0\nsquest_quota_limit{billing_group=\"Assurance\",quota_attribute=\"CPU\"} 45.0\nsquest_quota_limit{billing_group=\"Assurance\",quota_attribute=\"Memory\"} 12.0)\n</code></pre> <p>A percentage of consumption can be calculated by using <code>squest_quota_consumed</code> and <code>squest_quota_limit</code>. PromQL example: <pre><code>round((squest_quota_consumed / squest_quota_limit) * 100)\n</code></pre></p>"},{"location":"manual/notifications/","title":"Notifications","text":"<p>Note</p> <p>Squest current notification system only support emails.</p>"},{"location":"manual/notifications/#enable-or-disable-notifications","title":"Enable or disable notifications","text":"<p>By default, notifications are enabled. You can disable all notifications from your profile page by accessing the profile page in the top right corner of the Squest application.</p> <p>Note</p> <p>Administrators receive all notifications for all events. Filters can be added to limit notifications to some criteria. See below.</p>"},{"location":"manual/notifications/#notification-filters-admin","title":"Notification filters (admin)","text":"<p>Notification filters can be set on several criteria:</p> <ul> <li>Services</li> <li>Operations</li> <li>Request states</li> <li>Instance states</li> <li>On instance spec conditions (when)</li> </ul> <p>When a filter is declared, all criteria in the filter must be valid to send a notification. For example, if a service and an operation is defined both need to be valid. </p> <p>Example behavior with 2 criteria defined: <pre><code>service1 AND operation2\n</code></pre></p> <p>When multiple item are selected for a particular criteria, only one item need to match to validate the criteria.</p> <p>Example behavior when setting multiple service and multiple operation: <pre><code>(service1 OR service2) AND (operation2 OR operation2)\n</code></pre></p>"},{"location":"manual/notifications/#when-ansible-like-conditions","title":"When: Ansible like conditions","text":"<p>The <code>when</code> condition allows to filter notification based on current \"request\". The syntax is the same as the one used in Ansible. The <code>request</code> object is directly usable as context in the condition without JINJA double-curly braces. See the Jinja documentation for more example.</p> <p>E.g with a 'when' based on the survey filled by the user <pre><code>request.fill_in_survey['location'] == 'grenoble'\n</code></pre></p> <p>E.g with instance spec <pre><code>request.instance.spec['spec_key1'] == 'spec_value1'\n</code></pre></p>"},{"location":"manual/quota/","title":"Quota","text":""},{"location":"manual/quota/#billing-groups","title":"Billing groups","text":"<p>Billing groups are linked to users and allow Squest administrator to visualize who is consuming what. As an administrator you can create multiple billing group and place user in them. A user can belong to multiple billing group.</p> <p></p> <p>Note</p> <p>Billing groups is an optional feature.</p>"},{"location":"manual/quota/#quota_1","title":"Quota","text":"<p>Quota can be used to:</p> <ul> <li>Track consumption of resources per billing group</li> <li>Create an auto approval request process by using them through global hooks and the squest API</li> </ul>"},{"location":"manual/quota/#quota-and-attributes","title":"Quota and attributes","text":"<p>A quota is a group of resource group attributes that you consider being of the same type.</p> <p>Let's take an example. We do provide 3 services through the catalog: </p> <ul> <li>Bare metal server</li> <li>Virtual machines in a VMware hypervisor</li> <li>K8S namespaces in a shared K8S cluster</li> </ul> <p>Each service create a resources in 3 different resource group of the resource tracking.</p> <p>The simplified graph view of resource group would be the following: </p> <p>Note</p> <p>All attributes are not represented. For a complete example of resource group and resource pool attribute link refer to the resource tracking doc</p> <p>No matter what service will be provisioned from the service catalog, we want to track for example our global consumption of CPU. The global CPU is actually linkable to:</p> <ul> <li>the <code>CPU</code> attribute of the \"Customer servers\" resource group</li> <li>the <code>vCPU</code> attribute of the \"Customer VMs\" resource group</li> <li>the <code>request.cpu</code> attribute of the \"K8S namespaces\" resource group</li> </ul> <p>So we would create a quota named \"CPU\" and link it to all resource group attribute definition</p> <p></p>"},{"location":"manual/quota/#link-quota-to-billing-groups","title":"Link quota to billing groups","text":"<p>Once quota are defined, you can link them to each billing group and set a limit. Squest will then calculate the consumption by retrieving each instance that are linked to tracked resource attributes.</p> <p>Note</p> <p>The limit does not block any request from the service catalog. This field is used to give the administrator information about consumptions.   The total consumption can exceed limit if the administrator provision services anyway.</p> <p>Consumed quota and limits are exposed as Prometheus metrics.  You can then create your own Grafana dashboard from them to visualize percentage consumption of each attribute per billing group.</p> <p></p>"},{"location":"manual/resource_tracking/","title":"Resource tracking","text":"<p>Nowadays, IT infrastructures are composed of multiple layers. Physical servers, virtual machines, containers, storage,... Each layer is consumer or a producer of resources of another layer. As an IT administrator, we need to monitor resource consumption of a top layers to be sure that we can provide  services on underlying layers. </p> <p>The resource tracking feature allows to monitor reserved resources and highlight available resource in an infrastructure.</p> <p>Note</p> <p>This feature is not a real time monitoring. It does not connect to you infrastructure to check the real  consumption but help to follow what resources have been reserved to avoid overallocation when accepting new request  from the service catalog.</p>"},{"location":"manual/resource_tracking/#concept","title":"Concept","text":"<p>To introduce the concept of resources, lets take the example of a virtualization stack like a VMware vCenter.</p> <p>The stack is composed of physical servers that produce resources like <code>CPU</code> and <code>memory</code> to the hypervisor. Then we can create VMs that will consume those resources as virtual CPU(<code>vCPU</code>) and <code>memory</code>. The hypervisor is then a resource pool with producers and consumers of resources.</p> <p>If we want to add more VMs that consume resources from the hypervisor resource pool, we need to be sure we have enough physical  servers that produce into it.  </p> <p>This stack could be drawn like the following with <code>resource group</code>(blue), <code>resource pool</code>(orange) and <code>resources</code>(green):</p> <p></p> <p>In this example, we have:</p> <ul> <li>two resources of the same kind(server) that produce resources into the resource pool <code>hypervisor</code></li> <li>two resources of the same kind(VM) that consume resources from the resource pool <code>hypervisor</code></li> </ul> <p>As server resources are of the same kind and produce in the same pool on the same attributes, they belong to the same resource group <code>servers</code>.</p> <p>As VM resources are of the same kind and consume in the same pool on the same attributes, they belong to the same resource group <code>VMs</code>.</p> <p>The previous drawing could be then simplified by just showing resource groups and resource pool:</p> <p></p>"},{"location":"manual/resource_tracking/#generic-objects","title":"Generic objects","text":""},{"location":"manual/resource_tracking/#resource-pool","title":"Resource pool","text":"<p>A <code>resource pool</code> is a generic object composed by <code>attributes</code>. Resource pool attributes have producers and consumers which are attributes from <code>resource groups</code>.</p> <p>The sum of all <code>resource group attributes</code> that produce in the same <code>resource pool attribute</code> give a total produced.</p> <p>The sum of all <code>resource group attributes</code> that consume in the same <code>resource pool attribute</code> give a total consumed.</p> <p>The difference between total produced and total consumed gives the amount of available resources for a particular <code>resource pool attribute</code>.</p> <p></p>"},{"location":"manual/resource_tracking/#resource-group","title":"Resource group","text":"<p>A <code>resource group</code> is a definition of a resource of same kind, composed of attributes that may produce or  consume from a particular <code>resource pool</code>.</p> <p>Example of resource group:</p> <ul> <li>Bare metal servers</li> <li>Physical disks</li> <li>VMware VMs</li> <li>K8S namespaces</li> <li>Openshift projects</li> <li>Openstack tenants</li> </ul> <p>Resource groups also have text attributes to provide some additional information.</p>"},{"location":"manual/resource_tracking/#resource","title":"Resource","text":"<p>A resource is an instance of a <code>resource group</code> definition. Resources can be created, updated or deleted from the Squest UI or API. Updating resources in a resource group impact the total amount of produced or consumed resource on pool's attributes.</p>"},{"location":"manual/resource_tracking/#multiple-layer-example","title":"Multiple layer example","text":"<p>In this example we do track the consumption of an orchestrator of container like Kubernetes or Openshift.  Namespaces (or projects in Openshift world) are a way to divide cluster resources between multiple users by using  resource quota.</p> <p>Openshift and Kubernetes frameworks are commonly deployed in a virtual machines.  So we retrieve layers from previous example with bare metal servers that produce resources in an hypervisor.</p> <p>Orchestrators are usually composed of 2 kind of node: Masters and Workers. Master VMs are used by the infrastructure itself and workers for user's workloads, aka namespaces.</p> <p>As namespaces are only executed in \"worker\" nodes, we need to declare 2 different resource group: </p> <ul> <li>Master VMs </li> <li>Worker VMs </li> </ul> <p>The aggregation of resources of all workers compose the resource pool of available resources that the <code>namespaces</code> resource group will consume.</p> <p>The complete resource tracking definition would look like the following:</p> <p></p> <p>With this definition, we are able to determine there is enough available resources in pools to handle underlying objects.</p> <p>Adding a new namespace in the last resource group <code>namespaces</code> will generate more consumption on the <code>K8S</code> resource pool. If this last pool is lacking of resources, adding more worker node in the <code>worker VMs</code> resource  group will be required, generating consumption on upper layers and so on...</p>"},{"location":"manual/resource_tracking/#link-service-catalog-instances-to-resources","title":"Link service catalog instances to resources","text":"<p>Resources can be created from the API. It allows to create automatically a new resource in a resource group when  something is provisioned from the service catalog.</p> <p>In the example below, the playbook executed in Tower/AWX would have created a VM.  At the end of the process we call the squest API to instantiate a resource in the right resource group to reflect the  consumption. We link as well the pending instance(given by <code>squest.instance.id</code>) to this resource via the flag <code>service_catalog_instance</code>. <pre><code>- name: Add resource in resource group example\nhosts: localhost\nconnection: local\ngather_facts: false\n\nvars:\nsquest_token: 48c67f9c2429f2d3a1ee0e47daa00ffeef4fe744\nsquest_bearer_token: \"Bearer {{ squest_token }}\"\nsquest_api: \"http://127.0.0.1:8000/api/\"\nresource_group_vm_id: 8\nsquest: # this would be the sent data from squest as extra vars\ninstance:\nid: 8\nname: test\nservice: 1\nspec: { }\nstate: PROVISIONING\nvm_name: \"test-vm\"\nvm_vcpu: 4\nvm_memory: 16\ndesc: \"My description\"\n\ntasks:\n- name: Print info sent by Squest\ndebug:\nvar: squest\n\n# -----------------------\n# PLACE HERE ALL THE MAGIC TO CREATE THE RESOURCE\n# -----------------------\n- name: Create a resource in squest\nuri:\nurl: \"{{ squest_api }}resource_tracker/resource_group/{{ resource_group_vm_id }}/resources/\"\nheaders:\nAuthorization: \"{{ squest_bearer_token }}\"\nmethod: POST\nbody:\nname: \"{{ vm_name }}\"\nservice_catalog_instance: \"{{ squest['instance']['id'] }}\"\nattributes:\n- name: \"vCPU\"\nvalue: \"{{ vm_vcpu }}\"\n- name: \"Memory\"\nvalue: \"{{ vm_memory }}\"\ntext_attributes:\n- name: \"Description\"\nvalue: \"{{ desc }}\"\nstatus_code: 201\nbody_format: json\n</code></pre></p>"},{"location":"manual/resource_tracking/#tags","title":"Tags","text":"<p>Tags are words that are attached to objects, such as Resource Pool or Resource Group.</p> <p>Tags are intended to be used to specify identifying objects that are meaningful and relevant to users. Tags can be used to organize and select subsets of objects. Tags can be attached to objects at creation time and subsequently added and modified at any time.</p>"},{"location":"manual/resource_tracking/#how-to-add-multiple-tags","title":"How to add multiple tags","text":"<ul> <li> <p>If the input doesn't contain any commas or double quotes, it is simply treated as a space-delimited list of tag names.</p> </li> <li> <p>If the input does contain either of these characters:</p> <ul> <li> <p>Groups of characters which appear between double quotes take precedence as multi-word tags (so double quoted tag   names may contain commas). An unclosed double quote will be ignored.</p> </li> <li> <p>Otherwise, if there are any unquoted commas in the input, it will be treated as comma-delimited. If not, it will   be treated as space-delimited.</p> </li> </ul> </li> </ul> <p>Examples:</p> Tag input string Resulting tags Notes apple ball cat <code>[\"apple\", \"ball\", \"cat\"]</code> No commas, so space delimited apple, ball cat <code>[\"apple\", \"ball cat\"]</code> Comma present, so comma delimited \"apple, ball\" cat dog <code>[\"apple, ball\", \"cat\", \"dog\"]</code> All commas are quoted, so space delimited \"apple, ball\", cat dog <code>[\"apple, ball\", \"cat dog\"]</code> Contains an unquoted comma, so comma delimited apple \"ball cat\" dog <code>[\"apple\", \"ball cat\", \"dog\"]</code> No commas, so space delimited \"apple\" \"ball dog <code>[\"apple\", \"ball\", \"dog\"]</code> Unclosed double quote is ignored"},{"location":"manual/resource_tracking/#over-commitment","title":"Over commitment","text":"<p>Over commitment is available on all resource pool attributes for consumers and producers.</p> <p>The over commitment allows you to specify whether resource pools produce/consume more or less than expected.</p> <p>The most common case is CPU/vCPU:</p> <p>If a host has 28 core processors and hyperthreading is enabled, that host will produce 56 vCPUs (28 cores x 2 threads per core) then you can configure the over commitment on the CPU produced attribute to 2 to match this behavior.</p>"},{"location":"manual/teams/","title":"Teams","text":"<p>Teams can be used to give a set of permissions on an object to a user or a group of users. This feature allows, for example, to share instances of provisioned services to multiple users so they can retrieve and  manage request of those instances in their own Squest session.</p> <p>A team can be created by any logged user. The creator become the default administrator of the team and can then:</p> <ul> <li>link instances</li> <li>add users</li> <li>set permissions</li> </ul> <p>Note</p> <p>A team can have multiple admins but needs to have at least one admin</p>"},{"location":"manual/teams/#team-roles","title":"Team roles","text":"Role Team permissions Administrator List membersManage membersLink instancesAssign permissions Member List members"},{"location":"manual/teams/#role-permissions-in-teams","title":"Role permissions in teams","text":"Role Instance permissions Request permissions Administrator Open supportRequest new operationsListUpdateDelete ListCancelCommentUpdateDelete Operator Open supportRequest new operationsList ListCancelComment Reader List List"},{"location":"manual/tools/","title":"Tools","text":""},{"location":"manual/tools/#global-hooks","title":"Global Hooks","text":"<p>Global hooks are a way to call a Tower/AWX job template following the new state of a <code>Request</code> or an <code>Instance</code>.</p> <p>For example, if you want to call a job template that performs an action everytime a <code>Request</code> switch to <code>FAILED</code> state.</p> <p>Form field:</p> <ul> <li>name: Name of your hook</li> <li>Model: Target model object that will be linked to the hook (<code>Request</code> or an <code>Instance</code>)</li> <li>State: State of the selected <code>model</code>. The hook will be triggered when an instance of the select model type will switch to this selected state</li> <li>Job template: The Tower/AWX job template to execute when an instance of the selected model reach the selected state</li> <li>Extra vars: extra variable as JSON to add to the selected job template</li> </ul> <p>States documentation:</p> <ul> <li>Available states for a <code>Request</code>.</li> <li>Available states for a <code>Instance</code>.</li> </ul>"},{"location":"manual/tools/#announcements","title":"Announcements","text":"<p>Note</p> <p>Configure your time zone.</p> <p>Announcements allow Squest administrator to notify users. Announcements are displayed to end users in Dashboard page.</p> <p>Administrator defines beginning, end, title, message and type of announcement.</p>"},{"location":"manual/tools/#custom-links","title":"Custom links","text":"<p>Custom links allow to display arbitrary hyperlinks to external content by using Squest <code>instance</code> attributes. Custom links appear as buttons in the top right corner of an instance detail page. Jinja template can be used to insert data from the current squest <code>instance</code> details like <code>instance.spec</code>.</p> <p>For example a link can be created to expose the Hypervisor URL that has been placed into the instance spec of a created resource.</p> Name Required Comment name true Name of the custom link. When <code>loop</code> is used, the name is used for the dropdown button name services true Define in which instance details page the button will appear text true Text in the button. Jinja template supported url true URL of the link. Jinja template supported button color false Color of the displayed button when false Ansible like \"when\" condition loop false Ansible like \"loop\" Enabled false Enable or disable the button Is admin only false When set to <code>true</code>, only Squest administrators can see the button"},{"location":"manual/tools/#jinja-templating","title":"Jinja templating","text":"<p>Jinja templating can be used in the <code>text</code> or <code>URL</code> definition. The <code>instance</code> object of the current instance detail  page is used as context.</p> <p>Full <code>instance</code> object definition can be retrieved through the API documentation.</p> <p>Instance spec example: <pre><code>{\n\"key1\": \"value1\"\n}\n</code></pre></p> <p>Button text example: <pre><code>Button {{ instance.name }}\n</code></pre></p> <p>Button url example: <pre><code>https://external_resource.domain/?name={{ instance.spec.key1 }}\n</code></pre></p> <p>Rendered button with an instance named \"k8S ns test\": <pre><code>&lt;a href=\"https://external_resource.domain/?name=value1\"&gt;Button k8S ns test&lt;/a&gt;\n</code></pre></p>"},{"location":"manual/tools/#when-condition","title":"When condition","text":"<p>The when condition allow to display the button only on certain condition like the \"when\" flag on Ansible.</p> <p>E.g: <pre><code>spec['configvar'] == 'value' and user_spec['other'] == 'value'\n</code></pre></p> <p>Note</p> <p>Like for Ansible, double curly braces are not used in 'when' declaration.</p>"},{"location":"manual/tools/#loop","title":"Loop","text":"<p>When the loop definition is set, a dropdown button is created with a link for each element of the given list. Like for Ansible, the element is exposed as <code>item</code> in the Jinja template of the button text or URL.</p> <p>Instance spec example: <pre><code>{\n\"my_list\": [\n\"item1\",\n\"item2\"\n]\n}\n</code></pre></p> <p>Loop example: <pre><code>{{ instance.spec.my_list }}\n</code></pre></p> <p>Button text example: <pre><code>name: {{ item }}\n</code></pre></p> <p>Button url example: <pre><code>https://external_resource.domain/{{ item }}\n</code></pre></p> <p>Rendered links into the dropdown button: <pre><code>&lt;a href=\"https://external_resource.domain/item1\"&gt;name: item1&lt;/a&gt;\n&lt;a href=\"https://external_resource.domain/item2\"&gt;name: item2&lt;/a&gt;\n</code></pre></p>"},{"location":"manual/service_catalog/concept/","title":"Concept","text":"<p>Once Squest is linked to a Tower/AWX server, \"services\" can be added into the catalog.</p> <p>A service is composed of <code>operations</code> that are pointers to \"job templates\" present in Tower/AWX.</p> <p>A service has at least one operation of type <code>CREATE</code> that allows to provision the resource.</p> <p>A service can have then multiple operation of type <code>UPDATE</code> and <code>DELETE</code> that allow to manage the lifecycle of instances that have been created via the <code>CREATE</code> operation.</p>"},{"location":"manual/service_catalog/concept/#provisioning-a-service","title":"Provisioning a service","text":"<p>When a user request for the first time a service, an instance is created automatically and set to \"pending\" state on Squest. Once approved by the administrator, the request is sent to Tower to execute the linked job template.</p> <p>The executed job, aka the Ansible playbook, need to call back the Squest API in order to attach information (spec) to the pending instance.</p> <p>Squest provisioning workflow: sequenceDiagram     participant User     participant Admin     participant Squest     participant Tower     User-&gt;&gt;Squest: Request service     Admin-&gt;&gt;Squest: Approve     Admin-&gt;&gt;Squest: Process     Squest-&gt;&gt;Tower: Process     Squest--&gt;&gt;Tower: Check     Note right of Tower: Running     Tower-&gt;&gt;Squest: Instance spec &lt;br&gt; {'uuid': 34, 'name': 'instance_name'}     Squest--&gt;&gt;Tower: Check     Note right of Tower: Successful         Squest-&gt;&gt;User: Notify service ready</p> <p>The playbook will receive a <code>squest</code> extra variable that contains information of to the pending instance linked to the request in addition to all extra variables which come from the survey of the job template.</p> <p>Example of extra variables sent by Squest: <pre><code>squest:\nsquest_host: http://squest.domain.local\nrequest:\ninstance:\nid: 1\nname: test\nservice: 1\nspec:\nfile_name: foo.conf\nstate: PROVISIONING\nspoc: 2\n</code></pre></p> <p>Specs related to the created instance are important in order to be sent later to a playbook in charge of updating this particular instance.</p> <p>Sent specs must contain unique IDs that allow to identify precisely the instance. (E.g: <code>uuid</code> of a VMware VM, <code>namespace</code> and <code>cluster_api_url</code> for an Openshift project)</p> <p>Playbook example:</p> <p>In the example below, we've configured a job template with a survey that ask for a variable named <code>file_name</code>. The playbook will:</p> <ul> <li>create the resource (the file)</li> <li>call Squest api to link spec of the created resource to the instance</li> </ul> <pre><code>- name: Create a file\nhosts: localhost\nconnection: local\ngather_facts: false\n\nvars:\nsquest_token: 48c67f9c2429f2d3a1ee0e47daa00ffeef4fe744\nsquest_bearer_token: \"Bearer {{ squest_token }}\"\nsquest_api_url: \"http://192.168.58.128:8000/api/\"\n\ntasks:\n- name: Print the job template survey variable\ndebug:\nvar: file_name\n\n- name: Print info sent by Squest\ndebug:\nvar: squest\n\n- name: Create a file with the given file_name\nansible.builtin.file:\npath: \"/tmp/{{ file_name }}\"\nowner: user\ngroup: user\nmode: '0644'\nstate: touch\n\n- name: Update spec of the instance via the squest API\nuri:\nurl: \"{{ squest_api_url }}service_catalog/instance/{{ squest['request']['instance']['id'] }}/\" # do not forget the last slash\nheaders:\nAuthorization: \"{{ squest_bearer_token }}\"\nmethod: PATCH\nbody:\nspec:\nfile_name: \"{{ file_name }}\"\nstatus_code: 200\nbody_format: json\n</code></pre>"},{"location":"manual/service_catalog/concept/#day-2-operations","title":"Day 2 operations","text":"<p>Day 2 operations are operations that update or delete existing resources.</p> <p>Note</p> <p>By default, recent version of AWX/Tower drop extra variables that are not declared in the survey. To be able to receive Squest extra vars you need to enable \"Prompt on Launch\" in the \"Variables\" section of you job template. This correspond to the flag \"ask_variables_on_launch\" of the job_template model on the Tower/AWX API.</p> <p>When a user creates a request for a day 2 operation of a provisioned instance, Squest automatically attach an <code>extra_vars</code> named <code>squest</code> that contains the instance spec sent by the playbook used to provision at first the resource.</p> <p>The playbook used to update the instance need to use info placed in <code>squest</code> variable to retrieve the real resource that need to be updated or deleted. The update playbook can send a new version of the instance to squest at the end of its process if required.</p> sequenceDiagram     participant User     participant Admin     participant Squest     participant Tower     User-&gt;&gt;Squest: Request update     Admin-&gt;&gt;Squest: Approve     Admin-&gt;&gt;Squest: Process     Squest-&gt;&gt;Tower: Process - Extra vars:&lt;br&gt; {'squest': {'uuid': 34, 'name': 'instance_name'}}     Squest--&gt;&gt;Tower: Check     Note right of Tower: Running     Tower-&gt;&gt;Squest: Instance spec update &lt;br&gt; {'uuid': 34, 'name': 'instance_new_name}     Squest--&gt;&gt;Tower: Check     Note right of Tower: Successful         Squest-&gt;&gt;User: Notify service updated <p>Playbook example:</p> <p>Example of extra vars sent by squest: <pre><code>squest:\nsquest_host: http://squest.domain.local\nrequest:\ninstance:\nid: 1\nname: test-instance\nservice: 1\nspec:\nfile_name: foo.conf\nspoc: 2\nstate: UPDATING\nstring_to_place_in_file: \"this is a string\"\n</code></pre></p> <p>In the example below, the update job template survey ask for a <code>string_to_place_in_file</code> variable. The playbook receive as well all information that help to retrieve the resource to update. In this example the resource is the <code>file_name</code>. <pre><code>- name: Update content of a file\nhosts: localhost\nconnection: local\ngather_facts: false\n\ntasks:\n- name: Print the job template survey variable\ndebug:\nvar: string_to_place_in_file\n\n- name: Print info sent by Squest\ndebug:\nvar: squest\n\n- name: Add content into the file_name given by squest instance spec\nansible.builtin.lineinfile :\npath: \"/tmp/{{ squest['request']['instance']['spec']['file_name'] }}\"\nline: \"{{ string_to_place_in_file }}\"\ncreate: yes\n</code></pre></p>"},{"location":"manual/service_catalog/operation/","title":"Operation","text":""},{"location":"manual/service_catalog/operation/#configuration","title":"Configuration","text":"Name Description Name Short name of the operation Description Small description of the operation Job template Executed job template in the backend Tower/AWX server Operation type Type of operation (Create, update, delete). Change the state of he instance after executing the operation Approval workflow Define an optional approval workflow Process timeout Number of second to wait for a successful return from the executed job template Auto accept If set to <code>True</code> a submitted request for this operation will be automatically accepted Auto process If set to <code>True</code> an accepted request for this operation will be automatically processed Enabled If set to <code>True</code> the operation can be requested from the UI and API Is admin operation If set to <code>True</code> the operation is only visible and can be only requested by administrators Extra vars Set of extra vars as JSON Default inventory ID ID of the Tower/AWX inventory to use by default.  Leave blank to use the default Job Template inventory Default limit Comma separated list of inventory host limits Default tags Comma separated list of tags to use Default skip tags Comma separated list of tags to skip Default verbosity Verbosity level (integer) Default job type Job type (Run or Check) Default diff mode Default <code>False</code>. This is equivalent to Ansible's --diff mode in the CLI Default credential IDs Comma separated list of credentials ID"},{"location":"manual/service_catalog/operation/#job-template-config","title":"Job template config","text":"<p>By default, Squest will execute the selected Job Template with the config as set in Tower/AWX. </p> <p>If a field is configured to \"Prompt on launch\" in Tower/AWX, the administrator can override it from the \"Process\" page of an accepted request:</p> <p>Overridable fields:</p> <ul> <li>Inventory (ID)</li> <li>Limit (hosts)</li> <li>Tags</li> <li>Skip tags</li> <li>Verbosity</li> <li>Job type</li> <li>Diff mode (Show changes)</li> <li>Credentials (Comma separated list of ID)</li> </ul> <p>The \"default\" configuration set at operation level allow to automatically pre-fill the \"Process\" page with values.</p> <p>Jinja templating can be used in the default value based on the current <code>{{ request }}</code> object as context. Examples can be retrieved in the dedicated documentation section. Full <code>request</code> object definition can be retrieved through the API documentation.</p> <p>Default value precedence:</p> flowchart LR     Tower(Default from Tower/AWX) --&gt; Squest(Default from Squest) --&gt; Process(Process request page) <p>Note</p> <p>Default inventory ID field is expecting an integer that correspond the the inventory ID in Tower/AWX.</p> <p>Default credential IDs field is expecting a comma separated list of integer that correspond existings credentials ID in Tower/AWX.</p>"},{"location":"manual/service_catalog/operation/#approval","title":"Approval","text":"<p>By default, Requests can be approved by any administrator when Approval Workflow is not defined in the Operation. After being approved, the Request is in 'ACCEPTED' state and can be processed.</p>"},{"location":"manual/service_catalog/operation/#approval-workflow","title":"Approval Workflow","text":"<p>An Approval Workflow is composed by one or multiple Approval Step. Approval Steps of the Workflow must be approved one by one following the order. After accepting the last one, the request witch to 'ACCEPTED' state and can be processed.</p> <p>Note</p> <p>The auto-accept option can not be set in the Operation with an Approval Workflow.</p>"},{"location":"manual/service_catalog/operation/#approval-step","title":"Approval Step","text":"<p>An Approval Step can only be approved by its Teams members. It is approved when all Teams approved the Request or at least one depending on the Type.</p> <p>Note</p> <p>Approval Steps are linked to Teams and not users. It means that any member can approved for his Team.</p> Name Description Name Unique identifier of the Approval Step in the Approval Workflow. Type Defined how the Approval Step is Approved. See supported types below Teams List of Teams that can approve the Approval Step. <p>Type</p> <ul> <li>At least one: At least one team must approve the Approval Step to move to the next one.</li> <li>All of them: All teams of the Approval Step must approve to move to the next one.</li> </ul>"},{"location":"manual/service_catalog/operation/#survey","title":"Survey","text":"<p>The survey of an operation can be edited to change the behavior of the generated form of a request.</p> <p>Note</p> <p>Surveys in Squest are actually surveys attached to each job templates in your Tower/AWX. Squest can only disable the ones that you don't want to be filled by your end users. Those fields, if declared as mandatory on Tower/AWX, will need to be filled anyway by the admin when approving a request.</p>"},{"location":"manual/service_catalog/operation/#enabled-fields","title":"Enabled fields","text":"<p>An enabled field is displayed into the end user survey. By default, all fields are enabled when creating a new operation.</p> <p>Note</p> <p>If the field is set as required into the Tower/AWX job template survey config then the administrator will have to fill it in any case during the review of the request.</p>"},{"location":"manual/service_catalog/operation/#default-value","title":"Default value","text":"<p>When set, the default value is pre-filled into the final form. It takes precedence over the default value set in Tower/AWX job template survey config.</p> <p>Default value precedence:</p> flowchart LR     tower(Default from Tower/AWX) --&gt; squest(Default from Squest value) --&gt; User(User's input)  --&gt; Admin(Admin's input) <p>Note</p> <p>When used with a 'multiple select' or 'multiple select multiple' type of field, the value need to be a valid one from the Tower/AWX survey field options.</p> <p>Jinja templating</p> <p>Jinja templating can be used in the default value based on the current <code>{{ instance }}</code> object as context. Examples can be retrieved in the dedicated documentation section.</p> <p>Full <code>instance</code> object definition can be retrieved through the API documentation.</p>"},{"location":"manual/service_catalog/service/","title":"Service","text":""},{"location":"manual/service_catalog/service/#configuration","title":"Configuration","text":"Name Description Name Short name of the service Description Small description of the operation Image Image used into the catalog Billing Define the billing behavior when requesting the service Enabled If set to <code>True</code> the service is visible in the catalog External support URL Define an external support  tool URL Extra vars Set of extra vars as JSON"},{"location":"manual/service_catalog/service/#billing-group","title":"Billing group","text":"<p>By default, Squest services are not linked to any billing group.</p> <p>Administrators can configure how the billing of the service will be predefined.</p> <p>Through the service form, choices are:</p> <ul> <li>Administrator defined billing group</li> <li>User defined billing group:<ul> <li>From his billing group</li> <li>From all billing group</li> </ul> </li> </ul> <p>Administrator defined billing group</p> <p>Administrators select a fixed billing group (can be none). Each created instance will be linked to this billing group.</p> <p>Administrators can also hide the billing from the end users. The billing group will not be asked neither shown in the end user form when requesting the service.</p> <p>User defined billing group</p> <ul> <li>From his billing group: Administrators let the end user choose from his billing group when he sends an instance request.</li> <li>From all billing group: Administrators let the end user choose from all available billing group when he requests a service.</li> </ul>"},{"location":"manual/service_catalog/service/#extra-vars","title":"Extra vars","text":"<p>Some extra variables can be declared on some Squest level like <code>tower_server</code>, <code>service</code> or <code>operation</code>.</p> <p>These extra variables are added automatically when processing a request and so executing a job template.</p> <p>If an extra variable is set with the same name in different places, the variable will be overridden following a certain order. Squest will apply the following variable precedence:</p> flowchart LR     survey(Request survey) --&gt; Tower(Tower) --&gt; Service(Service)  --&gt; Operation(Operation)"},{"location":"manual/service_catalog/service/#external-support-url","title":"External support URL","text":"<p>Squest has an integrated support management. End user can open a support ticket on available instances. An external url can be defined as support tool in each service configuration. This allows to configure for example a redirection to services like GitHub issues or Jira.</p> <p>The external support URL support jinja templating to insert the current instance metadata as query parameters.</p> <p>E.g: <pre><code>http://my_external_tool.domain.local/?instance_name={{ instance.name }}?instance_id={{ instance.id }}?vm_os={{ instance.spec.vm_os }}\n</code></pre></p> <p>Example with Github issue query parameters: <pre><code>https://github.com/HewlettPackard/squest/issues/new?title=Templated+Github+issue&amp;body=Instance%3A+{{ instance.name }}\n</code></pre></p> <p>Note</p> <p>Special characters need to be converted into a format that can be transmitted over the Internet. URLs can only be sent over the Internet using the ASCII character-set.</p>"}]}